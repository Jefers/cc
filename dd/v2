import React, { useState, useEffect } from 'react';
import { 
  Users, 
  DollarSign, 
  Calendar, 
  PiggyBank, 
  Shield, 
  UserCheck, 
  BarChart3, 
  Settings, 
  Plus, 
  Search, 
  Upload, 
  Download,
  Menu,
  X,
  CheckCircle,
  AlertCircle,
  Wallet,
  TrendingUp,
  FileText,
  Eye,
  Edit,
  Trash2
} from 'lucide-react';

const LendingApp = () => {
  // State Management
  const [currentView, setCurrentView] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [language, setLanguage] = useState('en');
  
  // Data States
  const [clients, setClients] = useState([]);
  const [loans, setLoans] = useState([]);
  const [collections, setCollections] = useState([]);
  const [leaders, setLeaders] = useState([]);
  const [accountOfficers, setAccountOfficers] = useState([]);
  const [settings, setSettings] = useState({
    loanAmount: 5000,
    interestRate: 20,
    loanTerm: 60,
    dailyPayment: 120,
    insuranceFee: 300,
    cbuFee: 100,
    processingFee: 75,
    passbookFee: 30
  });

  // Form States
  const [showClientForm, setShowClientForm] = useState(false);
  const [showLoanForm, setShowLoanForm] = useState(false);
  const [editingClient, setEditingClient] = useState(null);

  // Load data from localStorage on component mount
  useEffect(() => {
    const savedClients = localStorage.getItem('lending_clients');
    const savedLoans = localStorage.getItem('lending_loans');
    const savedCollections = localStorage.getItem('lending_collections');
    const savedLeaders = localStorage.getItem('lending_leaders');
    const savedAOs = localStorage.getItem('lending_aos');
    const savedSettings = localStorage.getItem('lending_settings');
    const savedDarkMode = localStorage.getItem('lending_darkmode');

    if (savedClients) setClients(JSON.parse(savedClients));
    if (savedLoans) setLoans(JSON.parse(savedLoans));
    if (savedCollections) setCollections(JSON.parse(savedCollections));
    if (savedLeaders) setLeaders(JSON.parse(savedLeaders));
    if (savedAOs) setAccountOfficers(JSON.parse(savedAOs));
    if (savedSettings) setSettings(JSON.parse(savedSettings));
    if (savedDarkMode) setDarkMode(JSON.parse(savedDarkMode));
  }, []);

  // Save data to localStorage whenever state changes
  useEffect(() => {
    localStorage.setItem('lending_clients', JSON.stringify(clients));
  }, [clients]);

  useEffect(() => {
    localStorage.setItem('lending_loans', JSON.stringify(loans));
  }, [loans]);

  useEffect(() => {
    localStorage.setItem('lending_collections', JSON.stringify(collections));
  }, [collections]);

  useEffect(() => {
    localStorage.setItem('lending_darkmode', JSON.stringify(darkMode));
  }, [darkMode]);

  // Language translations
  const translations = {
    en: {
      dashboard: 'Dashboard',
      clients: 'Clients',
      loans: 'Loans',
      collections: 'Collections',
      savings: 'CBU/Savings',
      insurance: 'Insurance',
      leaders: 'Leaders',
      accountOfficers: 'Account Officers',
      reports: 'Reports',
      settings: 'Settings',
      addClient: 'Add Client',
      totalClients: 'Total Clients',
      activeLoans: 'Active Loans',
      todayCollections: 'Today\'s Collections',
      totalCBU: 'Total CBU',
      name: 'Name',
      loanAmount: 'Loan Amount',
      phone: 'Phone',
      address: 'Address',
      save: 'Save',
      cancel: 'Cancel',
      edit: 'Edit',
      delete: 'Delete',
      view: 'View'
    },
    tl: {
      dashboard: 'Dashboard',
      clients: 'Mga Kliyente',
      loans: 'Mga Utang',
      collections: 'Koleksyon',
      savings: 'CBU/Ipon',
      insurance: 'Insurance',
      leaders: 'Mga Leader',
      accountOfficers: 'Account Officers',
      reports: 'Mga Ulat',
      settings: 'Settings',
      addClient: 'Magdagdag ng Kliyente',
      totalClients: 'Kabuuang Kliyente',
      activeLoans: 'Aktibong Utang',
      todayCollections: 'Koleksyon Ngayon',
      totalCBU: 'Kabuuang CBU',
      name: 'Pangalan',
      loanAmount: 'Halaga ng Utang',
      phone: 'Telepono',
      address: 'Tirahan',
      save: 'I-save',
      cancel: 'Kanselahin',
      edit: 'I-edit',
      delete: 'Tanggalin',
      view: 'Tingnan'
    }
  };

  const t = translations[language];

  // Helper Functions
  const generateId = () => Math.random().toString(36).substr(2, 9);

  const calculateStats = () => {
    const totalClients = clients.length;
    const activeLoans = loans.filter(loan => loan.status === 'active').length;
    const todayCollections = collections.filter(collection => 
      new Date(collection.date).toDateString() === new Date().toDateString()
    ).length;
    const totalCBU = collections.reduce((sum, collection) => sum + (collection.cbuAmount || 15), 0);

    return { totalClients, activeLoans, todayCollections, totalCBU };
  };

  // Client Management Functions
  const addClient = (clientData) => {
    const newClient = {
      id: generateId(),
      ...clientData,
      createdAt: new Date().toISOString(),
      cycle: 1,
      status: 'active'
    };
    setClients([...clients, newClient]);
    setShowClientForm(false);
  };

  const updateClient = (clientId, clientData) => {
    setClients(clients.map(client => 
      client.id === clientId ? { ...client, ...clientData } : client
    ));
    setEditingClient(null);
    setShowClientForm(false);
  };

  const deleteClient = (clientId) => {
    if (window.confirm('Are you sure you want to delete this client?')) {
      setClients(clients.filter(client => client.id !== clientId));
    }
  };

  // CSV Import/Export Functions
  const handleCSVImport = (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const csv = e.target.result;
        const lines = csv.split('\n');
        const headers = lines[0].split(',');
        
        const newClients = lines.slice(1).filter(line => line.trim()).map(line => {
          const values = line.split(',');
          return {
            id: generateId(),
            name: values[0]?.trim() || '',
            loanAmount: parseFloat(values[1]) || settings.loanAmount,
            phone: values[2]?.trim() || '',
            address: values[3]?.trim() || '',
            createdAt: new Date().toISOString(),
            cycle: 1,
            status: 'active'
          };
        });
        
        setClients([...clients, ...newClients]);
      };
      reader.readAsText(file);
    }
  };

  const exportClientsCSV = () => {
    const headers = ['Name', 'Loan Amount', 'Phone', 'Address', 'Status', 'Cycle'];
    const csvContent = [
      headers.join(','),
      ...clients.map(client => 
        [client.name, client.loanAmount, client.phone, client.address, client.status, client.cycle].join(',')
      )
    ].join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `clients_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
  };

  // Component: Sidebar
  const Sidebar = () => (
    <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 transform ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0`}>
      <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200 dark:border-gray-700">
        <h1 className="text-xl font-bold text-gray-900 dark:text-white">LendingApp</h1>
        <button 
          onClick={() => setSidebarOpen(false)}
          className="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700"
        >
          <X className="h-6 w-6" />
        </button>
      </div>
      
      <nav className="mt-5 px-2">
        {[
          { id: 'dashboard', icon: BarChart3, label: t.dashboard },
          { id: 'clients', icon: Users, label: t.clients },
          { id: 'loans', icon: DollarSign, label: t.loans },
          { id: 'collections', icon: Calendar, label: t.collections },
          { id: 'savings', icon: PiggyBank, label: t.savings },
          { id: 'insurance', icon: Shield, label: t.insurance },
          { id: 'leaders', icon: UserCheck, label: t.leaders },
          { id: 'reports', icon: FileText, label: t.reports },
          { id: 'settings', icon: Settings, label: t.settings }
        ].map((item) => (
          <button
            key={item.id}
            onClick={() => {
              setCurrentView(item.id);
              setSidebarOpen(false);
            }}
            className={`group flex items-center px-2 py-2 text-base font-medium rounded-md w-full mb-1 ${
              currentView === item.id
                ? 'bg-blue-100 text-blue-900 dark:bg-blue-900 dark:text-blue-100'
                : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-white'
            }`}
          >
            <item.icon className="mr-4 h-6 w-6" />
            {item.label}
          </button>
        ))}
      </nav>
    </div>
  );

  // Component: Header
  const Header = () => (
    <div className="lg:pl-64">
      <div className="sticky top-0 z-40 lg:mx-auto lg:max-w-7xl lg:px-8">
        <div className="relative flex h-16 items-center justify-between border-b border-gray-200 bg-white px-4 dark:bg-gray-800 dark:border-gray-700 sm:px-6 lg:px-8">
          <div className="flex items-center">
            <button
              type="button"
              className="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700"
              onClick={() => setSidebarOpen(true)}
            >
              <Menu className="h-6 w-6" />
            </button>
          </div>
          
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setLanguage(language === 'en' ? 'tl' : 'en')}
              className="px-3 py-1 text-sm rounded-md bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600"
            >
              {language === 'en' ? 'TL' : 'EN'}
            </button>
            
            <button
              onClick={() => setDarkMode(!darkMode)}
              className="p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              {darkMode ? '☀️' : '🌙'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  // Component: Client Form
  const ClientForm = () => {
    const [formData, setFormData] = useState(editingClient || {
      name: '',
      loanAmount: settings.loanAmount,
      phone: '',
      address: '',
      coMaker: '',
      accountOfficer: ''
    });

    const handleSubmit = (e) => {
      e.preventDefault();
      if (editingClient) {
        updateClient(editingClient.id, formData);
      } else {
        addClient(formData);
      }
    };

    return (
      <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div className="relative top-20 mx-auto p-5 border w-11/12 max-w-md shadow-lg rounded-md bg-white dark:bg-gray-800">
          <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">
            {editingClient ? 'Edit Client' : t.addClient}
          </h3>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {t.name}
              </label>
              <input
                type="text"
                required
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {t.loanAmount}
              </label>
              <input
                type="number"
                required
                value={formData.loanAmount}
                onChange={(e) => setFormData({...formData, loanAmount: parseFloat(e.target.value)})}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {t.phone}
              </label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => setFormData({...formData, phone: e.target.value})}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                {t.address}
              </label>
              <textarea
                value={formData.address}
                onChange={(e) => setFormData({...formData, address: e.target.value})}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                rows="2"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Co-Maker
              </label>
              <input
                type="text"
                value={formData.coMaker}
                onChange={(e) => setFormData({...formData, coMaker: e.target.value})}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
            </div>
            
            <div className="flex justify-end space-x-3">
              <button
                type="button"
                onClick={() => {
                  setShowClientForm(false);
                  setEditingClient(null);
                }}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 border border-gray-300 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-300 dark:hover:bg-gray-500"
              >
                {t.cancel}
              </button>
              <button
                type="submit"
                className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
              >
                {t.save}
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  // Component: Dashboard View
  const DashboardView = () => {
    const stats = calculateStats();
    
    return (
      <div className="p-6">
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{t.dashboard}</h1>
        </div>
        
        <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
          <div className="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <Users className="h-6 w-6 text-gray-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-300 truncate">
                      {t.totalClients}
                    </dt>
                    <dd className="text-lg font-medium text-gray-900 dark:text-white">
                      {stats.totalClients}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <DollarSign className="h-6 w-6 text-gray-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-300 truncate">
                      {t.activeLoans}
                    </dt>
                    <dd className="text-lg font-medium text-gray-900 dark:text-white">
                      {stats.activeLoans}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <Calendar className="h-6 w-6 text-gray-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-300 truncate">
                      {t.todayCollections}
                    </dt>
                    <dd className="text-lg font-medium text-gray-900 dark:text-white">
                      {stats.todayCollections}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
          
          <div className="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
            <div className="p-5">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <PiggyBank className="h-6 w-6 text-gray-400" />
                </div>
                <div className="ml-5 w-0 flex-1">
                  <dl>
                    <dt className="text-sm font-medium text-gray-500 dark:text-gray-300 truncate">
                      {t.totalCBU}
                    </dt>
                    <dd className="text-lg font-medium text-gray-900 dark:text-white">
                      ₱{stats.totalCBU.toLocaleString()}
                    </dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="mt-8">
          <div className="bg-white dark:bg-gray-800 shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">
                Recent Activity
              </h3>
              <div className="mt-5">
                <div className="flow-root">
                  <ul className="-mb-8">
                    {clients.slice(0, 5).map((client, index) => (
                      <li key={client.id}>
                        <div className="relative pb-8">
                          {index !== 4 && (
                            <span className="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-600" />
                          )}
                          <div className="relative flex space-x-3">
                            <div>
                              <span className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white dark:ring-gray-800">
                                <Users className="h-5 w-5 text-white" />
                              </span>
                            </div>
                            <div className="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                              <div>
                                <p className="text-sm text-gray-500 dark:text-gray-300">
                                  New client: <span className="font-medium text-gray-900 dark:text-white">{client.name}</span>
                                </p>
                              </div>
                              <div className="text-right text-sm whitespace-nowrap text-gray-500 dark:text-gray-300">
                                <time>{new Date(client.createdAt).toLocaleDateString()}</time>
                              </div>
                            </div>
                          </div>
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Component: Clients View
  const ClientsView = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const filteredClients = clients.filter(client =>
      client.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
      <div className="p-6">
        <div className="sm:flex sm:items-center">
          <div className="sm:flex-auto">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{t.clients}</h1>
          </div>
          <div className="mt-4 sm:mt-0 sm:ml-16 sm:flex-none space-x-2">
            <input
              type="file"
              accept=".csv"
              onChange={handleCSVImport}
              className="hidden"
              id="csv-import"
            />
            <label
              htmlFor="csv-import"
              className="inline-flex items-center justify-center rounded-md border border-transparent bg-green-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-green-700 cursor-pointer"
            >
              <Upload className="h-4 w-4 mr-2" />
              Import CSV
            </label>
            <button
              onClick={exportClientsCSV}
              className="inline-flex items-center justify-center rounded-md border border-transparent bg-gray-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-gray-700"
            >
              <Download className="h-4 w-4 mr-2" />
              Export CSV
            </button>
            <button
              onClick={() => setShowClientForm(true)}
              className="inline-flex items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              {t.addClient}
            </button>
          </div>
        </div>

        <div className="mt-6">
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Search clients..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        <div className="mt-8 flex flex-col">
          <div className="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
            <div className="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
              <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
                <table className="min-w-full divide-y divide-gray-300 dark:divide-gray-600">
                  <thead className="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        {t.name}
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        {t.loanAmount}
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        {t.phone}
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        Cycle
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        Status
                      </th>
                      <th className="relative px-6 py-3">
                        <span className="sr-only">Actions</span>
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    {filteredClients.map((client) => (
                      <tr key={client.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                          {client.cycle}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            client.status === 'active' 
                              ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100'
                              : 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'
                          }`}>
                            {client.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <div className="flex space-x-2">
                            <button
                              onClick={() => {
                                setEditingClient(client);
                                setShowClientForm(true);
                              }}
                              className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                            >
                              <Edit className="h-4 w-4" />
                            </button>
                            <button
                              onClick={() => deleteClient(client.id)}
                              className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>

        {filteredClients.length === 0 && (
          <div className="text-center py-12">
            <Users className="mx-auto h-12 w-12 text-gray-400" />
            <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">No clients</h3>
            <p className="mt-1 text-sm text-gray-500 dark:text-gray-300">
              Get started by adding a new client.
            </p>
            <div className="mt-6">
              <button
                onClick={() => setShowClientForm(true)}
                className="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
              >
                <Plus className="h-4 w-4 mr-2" />
                {t.addClient}
              </button>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Component: Loans View
  const LoansView = () => {
    return (
      <div className="p-6">
        <div className="sm:flex sm:items-center">
          <div className="sm:flex-auto">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{t.loans}</h1>
            <p className="mt-2 text-sm text-gray-700 dark:text-gray-300">
              Manage loan issuance and amortization schedules
            </p>
          </div>
          <div className="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
            <button
              onClick={() => setShowLoanForm(true)}
              className="inline-flex items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              Issue New Loan
            </button>
          </div>
        </div>

        <div className="mt-8 bg-white dark:bg-gray-800 shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">
              Loan Products
            </h3>
            <div className="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
              <div className="border border-gray-200 dark:border-gray-600 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 dark:text-white">Standard Loan</h4>
                <p className="text-2xl font-bold text-blue-600 dark:text-blue-400">₱{settings.loanAmount.toLocaleString()}</p>
                <ul className="mt-2 text-sm text-gray-500 dark:text-gray-300 space-y-1">
                  <li>• {settings.interestRate}% interest</li>
                  <li>• {settings.loanTerm} days term</li>
                  <li>• ₱{settings.dailyPayment}/day payment</li>
                  <li>• Mon-Fri collection</li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        <div className="mt-8 bg-white dark:bg-gray-800 shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">
              Fee Structure
            </h3>
            <div className="mt-4">
              <dl className="grid grid-cols-1 gap-x-4 gap-y-2 sm:grid-cols-2">
                <div className="sm:col-span-1">
                  <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">Insurance Fee</dt>
                  <dd className="mt-1 text-sm text-gray-900 dark:text-white">₱{settings.insuranceFee}</dd>
                </div>
                <div className="sm:col-span-1">
                  <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">C.B.U. (Savings)</dt>
                  <dd className="mt-1 text-sm text-gray-900 dark:text-white">₱{settings.cbuFee}</dd>
                </div>
                <div className="sm:col-span-1">
                  <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">Processing Fee</dt>
                  <dd className="mt-1 text-sm text-gray-900 dark:text-white">₱{settings.processingFee}</dd>
                </div>
                <div className="sm:col-span-1">
                  <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">Passbook Fee</dt>
                  <dd className="mt-1 text-sm text-gray-900 dark:text-white">₱{settings.passbookFee}</dd>
                </div>
                <div className="sm:col-span-2 border-t border-gray-200 dark:border-gray-600 pt-2">
                  <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">Total Deductions</dt>
                  <dd className="mt-1 text-lg font-semibold text-gray-900 dark:text-white">
                    ₱{(settings.insuranceFee + settings.cbuFee + settings.processingFee + settings.passbookFee).toLocaleString()}
                  </dd>
                </div>
                <div className="sm:col-span-2">
                  <dt className="text-sm font-medium text-gray-500 dark:text-gray-300">Net Disbursement (₱{settings.loanAmount.toLocaleString()})</dt>
                  <dd className="mt-1 text-xl font-bold text-green-600 dark:text-green-400">
                    ₱{(settings.loanAmount - settings.insuranceFee - settings.cbuFee - settings.processingFee - settings.passbookFee).toLocaleString()}
                  </dd>
                </div>
              </dl>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Component: Collections View
  const CollectionsView = () => {
    const todayClients = clients.filter(client => client.status === 'active');
    
    return (
      <div className="p-6">
        <div className="sm:flex sm:items-center">
          <div className="sm:flex-auto">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{t.collections}</h1>
            <p className="mt-2 text-sm text-gray-700 dark:text-gray-300">
              Today's collection list - {new Date().toLocaleDateString()}
            </p>
          </div>
        </div>

        <div className="mt-8">
          <div className="bg-white dark:bg-gray-800 shadow rounded-lg">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">
                Collection Summary
              </h3>
              <div className="grid grid-cols-1 gap-4 sm:grid-cols-3">
                <div className="bg-blue-50 dark:bg-blue-900 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">{todayClients.length}</div>
                  <div className="text-sm text-blue-800 dark:text-blue-200">Clients to Visit</div>
                </div>
                <div className="bg-green-50 dark:bg-green-900 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-green-600 dark:text-green-400">₱{(todayClients.length * 120).toLocaleString()}</div>
                  <div className="text-sm text-green-800 dark:text-green-200">Expected Collection</div>
                </div>
                <div className="bg-yellow-50 dark:bg-yellow-900 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">₱{(todayClients.length * 15).toLocaleString()}</div>
                  <div className="text-sm text-yellow-800 dark:text-yellow-200">Expected CBU</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="mt-8">
          <div className="bg-white dark:bg-gray-800 shadow rounded-lg overflow-hidden">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4">
                Today's Collection List
              </h3>
              <div className="space-y-3">
                {todayClients.map((client) => (
                  <div key={client.id} className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900 dark:text-white">{client.name}</h4>
                      <p className="text-sm text-gray-500 dark:text-gray-300">{client.address}</p>
                      <p className="text-sm text-gray-500 dark:text-gray-300">Amount: ₱120 (₱100 loan + ₱15 CBU + ₱5 leader)</p>
                    </div>
                    <div className="flex space-x-2">
                      <button className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm">
                        <CheckCircle className="h-4 w-4" />
                      </button>
                      <button className="bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-md text-sm">
                        <AlertCircle className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
              
              {todayClients.length === 0 && (
                <div className="text-center py-8">
                  <Calendar className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-white">No collections today</h3>
                  <p className="mt-1 text-sm text-gray-500 dark:text-gray-300">
                    All collections for today have been completed or no active clients.
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Main Render
  return (
    <div className={darkMode ? 'dark' : ''}>
      <div className="h-screen flex overflow-hidden bg-gray-100 dark:bg-gray-900">
        <Sidebar />
        
        <div className="flex flex-col w-0 flex-1 overflow-hidden">
          <Header />
          
          <main className="flex-1 relative overflow-y-auto focus:outline-none">
            {currentView === 'dashboard' && <DashboardView />}
            {currentView === 'clients' && <ClientsView />}
            {currentView === 'loans' && <LoansView />}
            {currentView === 'collections' && <CollectionsView />}
            {currentView === 'savings' && <div className="p-6"><h1 className="text-2xl font-bold text-gray-900 dark:text-white">CBU/Savings Management</h1><p className="mt-2 text-gray-600 dark:text-gray-300">Coming soon...</p></div>}
            {currentView === 'insurance' && <div className="p-6"><h1 className="text-2xl font-bold text-gray-900 dark:text-white">Insurance Management</h1><p className="mt-2 text-gray-600 dark:text-gray-300">Coming soon...</p></div>}
            {currentView === 'leaders' && <div className="p-6"><h1 className="text-2xl font-bold text-gray-900 dark:text-white">Leader Management</h1><p className="mt-2 text-gray-600 dark:text-gray-300">Coming soon...</p></div>}
            {currentView === 'reports' && <div className="p-6"><h1 className="text-2xl font-bold text-gray-900 dark:text-white">Reports & Analytics</h1><p className="mt-2 text-gray-600 dark:text-gray-300">Coming soon...</p></div>}
            {currentView === 'settings' && <div className="p-6"><h1 className="text-2xl font-bold text-gray-900 dark:text-white">System Settings</h1><p className="mt-2 text-gray-600 dark:text-gray-300">Coming soon...</p></div>}
          </main>
        </div>
        
        {showClientForm && <ClientForm />}
        
        {sidebarOpen && (
          <div className="fixed inset-0 z-40 lg:hidden" onClick={() => setSidebarOpen(false)}>
            <div className="absolute inset-0 bg-gray-600 opacity-75"></div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LendingApp;4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white"
                          {client.name}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                          ₱{client.loanAmount?.toLocaleString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
                          {client.phone}
                        </td>
                        <td className="px-6 py-